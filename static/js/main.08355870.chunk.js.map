{"version":3,"sources":["../node_modules/colors/lib sync","logo.svg","logic/RE.js","actions/index.js","actions/ActionType.js","containers/AddLanguage.js","containers/RemoveLanguage.js","containers/LanguageList.js","components/ResponsiveDrawer.js","components/App.js","logic/Grammar.js","logic/FA.js","reducers/languageReducer.js","reducers/index.js","serviceWorker.js","Shape.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","__webpack_require__","p","followpos","alphabet","id_map","addLanguage","name","type","selectLanguage","selected_id","removeLanguage","updateGrammar","text","addState","state","addSymbol","symbol","setInitial","addFinal","removeFinal","updateTransition","to","determinize","minimize","union","intersection","updateRE","removeState","removeSymbol","AddLanguage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inputValue","updateInputValue","bind","assertThisInitialized","evt","setState","target","value","_this2","classes","react_default","a","createElement","className","align","TextField_default","textField","margin","onChange","placeholder","Button_default","variant","color","aria-label","button","onClick","preventDefault","Add_default","extendedIcon","React","Component","connect","dispatch","bindActionCreators","withStyles","theme","marginRight","spacing","unit","withTheme","RemoveLanguage","Delete_default","backgroundColor","LanguageList","checkForGraph","viz","Viz","Module","render","fa","reducer","languages","selected_language","transitions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","states","Symbol","iterator","next","done","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","size","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","concat","err","return","graph","toConsumableArray","finals","join","initial","renderSVGElement","then","element","document","getElementById","childElementCount","appendChild","item","replaceChild","childNodes","catch","console","log","determinizeDialogOpen","determinizeDialogName","unionDialogOpen","unionDialogName","intersectionDialogOpen","intersectionDialogName","minimizeDialogOpen","minimizeDialogName","table_header","map","TableRow_default","key","TableCell_default","component","scope","Radio_default","checked","Checkbox_default","has","Typography_default","length","style","indexOf","inputCellTransition","width","toUpperCase","info","grammar_text","re_text","_this3","grammar","re","Grid_default","container","alignItems","xs","Paper_default","paper","label","multiline","error","valid","rowsMax","title","Table_default","table","TableHead_default","tableHeader","head","maxLength","pattern","inputCellSymbol","toLowerCase","onKeyPress","test","TableBody_default","tableBody","inputCellState","buttonsContainer","buttons","disabled","isFiniteAutomata","Dialog_default","open","onClose","aria-labelledby","DialogTitle_default","DialogContent_default","DialogContentText_default","autoFocus","fullWidth","DialogActions_default","determinized","Divider_default","buildExamples","languageReducer","palette","common","white","border","display","padding","paddingTop","ResponsiveDrawer","mobileOpen","handleDrawerToggle","_this$props","drawer","Toolbar_default","src","logo","alt","List_default","listItem","language","ListItem_default","selected","noWrap","containers_AddLanguage","containers_RemoveLanguage","root","AppBar_default","appBar","IconButton_default","navIconHide","Menu_default","Hidden_default","mdUp","Drawer_default","anchor","direction","drawerPaper","ModalProps","keepMounted","smDown","implementation","content","toolbar","containers_LanguageList","flexGrow","height","zIndex","overflow","position","defineProperty","marginLeft","breakpoints","up","mixins","background","default","&:focus","& $primary, & $icon","App","components_ResponsiveDrawer","line_regex","XRegExp","Grammar","arguments","Vt","Vn","P","S","reset","lines","replace","split","_loop","i","exec","v","production","body","forEach","Set","add","_ret","extractTerminals","extractNonTerminals","rules","terminals","charAt","non_terminals","dfa","Vn_filtered","counter","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","delete","slice","Vn_whitout_S","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","FA","epsilonAtInitial","alert","sort","s","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","filter","eclosure","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","each","buildEClosure","reachable_states","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","buildReachableStates","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","reached_any_final","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","deleteState","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","deleteSymbol","available_letters","String","fromCharCode","has_changed","need_rename","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","selected_letter","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","hasEpsilonTransition","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","old_length","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","_iteratorNormalCompletion26","_didIteratorError26","_iteratorError26","_step26","_iterator26","_iteratorNormalCompletion27","_didIteratorError27","_iteratorError27","_step27","_iterator27","composedDestiny","_iteratorNormalCompletion28","_didIteratorError28","_iteratorError28","_step28","_iterator28","each_state","_iteratorNormalCompletion29","_didIteratorError29","_iteratorError29","_step29","_iterator29","_iteratorNormalCompletion30","_didIteratorError30","_iteratorError30","_step30","_iterator30","composedState","renameStates","dfaOriginal","_iteratorNormalCompletion31","_didIteratorError31","_iteratorError31","_step31","_iterator31","_iteratorNormalCompletion40","_didIteratorError40","_iteratorError40","_step40","_iterator40","_iteratorNormalCompletion32","_didIteratorError32","_iteratorError32","_step32","_iterator32","_iteratorNormalCompletion33","_didIteratorError33","_iteratorError33","_step33","_iterator33","_iteratorNormalCompletion34","_didIteratorError34","_iteratorError34","_step34","_iterator34","added_symbols","_iteratorNormalCompletion35","_didIteratorError35","_iteratorError35","_step35","_iterator35","_iteratorNormalCompletion36","_didIteratorError36","_iteratorError36","_step36","_iterator36","_iteratorNormalCompletion41","_didIteratorError41","_iteratorError41","_step41","_iterator41","_iteratorNormalCompletion37","_didIteratorError37","_iteratorError37","_step37","_iterator37","final","_iteratorNormalCompletion38","_didIteratorError38","_iteratorError38","_step38","_iterator38","_iteratorNormalCompletion39","_didIteratorError39","_iteratorError39","_step39","_iterator39","_iteratorNormalCompletion42","_didIteratorError42","_iteratorError42","_step42","_iterator42","_iteratorNormalCompletion43","_didIteratorError43","_iteratorError43","_step43","_iterator43","_iteratorNormalCompletion44","_didIteratorError44","_iteratorError44","_step44","_iterator44","_iteratorNormalCompletion54","_didIteratorError54","_iteratorError54","_step54","_iterator54","removeUselessStates","_iteratorNormalCompletion45","_didIteratorError45","_iteratorError45","_step45","_iterator45","hasUndefinedTransition","_iteratorNormalCompletion46","_didIteratorError46","_iteratorError46","_step46","_iterator46","_iteratorNormalCompletion47","_didIteratorError47","_iteratorError47","_step47","_iterator47","relation_table","_iteratorNormalCompletion48","_didIteratorError48","_iteratorError48","_step48","_iterator48","state_1","_iteratorNormalCompletion55","_didIteratorError55","_iteratorError55","_step55","_iterator55","state_2","marked","wait_list","_iteratorNormalCompletion49","_didIteratorError49","_iteratorError49","_step49","_iterator49","_iteratorNormalCompletion56","_didIteratorError56","_iteratorError56","_step56","_iterator56","_iteratorNormalCompletion50","_didIteratorError50","_iteratorError50","_step50","_iterator50","qu","_iteratorNormalCompletion57","_didIteratorError57","_iteratorError57","_step57","_iterator57","qv","_iteratorNormalCompletion58","_didIteratorError58","_iteratorError58","_step58","_iterator58","pu","pv","_iteratorNormalCompletion59","_didIteratorError59","_iteratorError59","_step59","_iterator59","x","_iteratorNormalCompletion60","_didIteratorError60","_iteratorError60","_step60","_iterator60","y","_iteratorNormalCompletion61","_didIteratorError61","_iteratorError61","_step61","_iterator61","e0","e1","new_states","equals_states","_iteratorNormalCompletion51","_didIteratorError51","_iteratorError51","_step51","_iterator51","_iteratorNormalCompletion62","_didIteratorError62","_iteratorError62","_step62","_iterator62","found","_iteratorNormalCompletion63","_didIteratorError63","_iteratorError63","_step63","_iterator63","new_state","_iteratorNormalCompletion52","_didIteratorError52","_iteratorError52","_step52","_iterator52","_iteratorNormalCompletion64","_didIteratorError64","_iteratorError64","_step64","_iterator64","_iteratorNormalCompletion65","_didIteratorError65","_iteratorError65","_step65","_iterator65","_iteratorNormalCompletion53","_didIteratorError53","_iteratorError53","_step53","_iterator53","_iteratorNormalCompletion66","_didIteratorError66","_iteratorError66","_step66","_iterator66","set_to","_iteratorNormalCompletion68","_didIteratorError68","_iteratorError68","_step68","_iterator68","match_any_new","selected_state","_iteratorNormalCompletion69","_didIteratorError69","_iteratorError69","_step69","_iterator69","_iteratorNormalCompletion70","_didIteratorError70","_iteratorError70","_step70","_iterator70","n","_iteratorNormalCompletion67","_didIteratorError67","_iteratorError67","_step67","_iterator67","_iteratorNormalCompletion71","_didIteratorError71","_iteratorError71","_step71","_iterator71","_iteratorNormalCompletion75","_didIteratorError75","_iteratorError75","_step75","_iterator75","result","_iteratorNormalCompletion72","_didIteratorError72","_iteratorError72","_step72","_iterator72","_iteratorNormalCompletion73","_didIteratorError73","_iteratorError73","_step73","_iterator73","state_x","_iteratorNormalCompletion76","_didIteratorError76","_iteratorError76","_step76","_iterator76","state_y","_iteratorNormalCompletion77","_didIteratorError77","_iteratorError77","_step77","_iterator77","new_to","_iteratorNormalCompletion74","_didIteratorError74","_iteratorError74","_step74","_iterator74","final_x","_iteratorNormalCompletion78","_didIteratorError78","_iteratorError78","_step78","_iterator78","final_y","new_finals","intial","RE","tree","text_to_parse","RegexTree","parse","node","Node","buildTree","firstpos","is_final","nullable","c1","c2","lastpos","buildNodes","last_element","expressions","splice","right","left","expression","action","newState","assign","push","extractElements","buildFromGrammar","det_name","toString","det_dfa","det_grammar","buildFromDFA","JSON","stringify","min_name","min_dfa","min_grammar","union_id","parseInt","Number","isInteger","union_dfa","union_grammar","intersection_id","intersection_dfa","intersection_grammar","re_dfa","buildDFA","automataApp","combineReducers","Boolean","window","location","hostname","match","store","createStore","ReactDOM","es","components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.08355870.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 138;","module.exports = __webpack_public_path__ + \"static/media/logo.ad3d725a.svg\";","/**\n * @file Manages Regular Expression operations and Syntax Tree build.\n * @author Bruno Marques do Nascimento\n */\n\nimport RegexTree from \"regexp-tree\";\nimport FA from \"./FA\";\n\nexport const LEAF_EPSILON = \"LEAF_EPSILON\";\nexport const LEAF = \"LEAF\";\nexport const OR = \"OR\";\nexport const STAR = \"STAR\";\nexport const CONCAT = \"CONCAT\";\n\nconst line_regex = /^(\\(|\\)|\\*|\\||[a-z]|[0-9])*$/;\nlet id;\nlet followpos;\nlet alphabet;\nlet id_map;\n\nexport default class RE {\n    constructor(text = \"\", valid = false) {\n        this.text = text;\n        this.valid = valid;\n    }\n\n    /**\n     * Build DFA from a syntax tree accordingly to the Regular Expression in UI.\n     *\n     * @return {fa}\n     */\n    buildDFA() {\n        if (this.text === \"\") {\n            this.valid = true;\n            return;\n        }\n        let tree;\n        try {\n            let text_to_parse = this.text.replace(/[ \\t\\r\\n]+/g, \"\");\n            tree = RegexTree.parse(`/${text_to_parse}/`);\n            if (line_regex.test(text_to_parse)) {\n                this.valid = true;\n            } else {\n                throw new Error(\"Invalid operator\");\n            }\n        } catch (e) {\n            this.valid = false;\n            console.log(e);\n            return;\n        }\n        let node = new Node();\n        node.buildTree(tree.body);\n\n        let dfa = new FA();\n        dfa.determinized = true;\n        for (let symbol of alphabet) {\n            dfa.addSymbol(symbol);\n        }\n\n        let initial = [...node.firstpos].sort().join(\"\");\n        dfa.addState(initial);\n        dfa.initial = initial;\n\n        let has_changed;\n\n        do {\n            has_changed = false;\n            for (let state of dfa.states) {\n                for (let symbol of dfa.alphabet) {\n                    let is_final = false;\n                    let to = new Set();\n                    for (let position of state.split(\"\")) {\n                        if (id_map[position] === symbol) {\n                            for (let each of followpos[position]) {\n                                to.add(each);\n                            }\n                        }\n                    }\n                    if (to.size) {\n                        let new_state = [...to].sort().join(\"\");\n                        dfa.transitions[state][symbol].to = new Set(new_state);\n                        dfa.transitions[state][symbol].text = \" \" + new_state;\n                        if (to.has(0)) is_final = true;\n                        if (!dfa.states.has(new_state)) {\n                            dfa.addState(new_state);\n                            if (is_final) dfa.addFinal(new_state);\n                            has_changed = true;\n                        }\n                    }\n                }\n            }\n        } while (has_changed);\n\n        dfa.renameStates();\n        return dfa;\n    }\n}\n\nclass Node {\n    constructor(id, nullable, c1, c2, type, value, firstpos, lastpos) {\n        this.id = id;\n        this.nullable = nullable;\n        this.type = type;\n        this.value = value;\n        this.c1 = c1;\n        this.c2 = c2;\n        this.firstpos = firstpos;\n        this.lastpos = lastpos;\n    }\n\n    /**\n     * Function called by root node to build syntax tree.\n     */\n    buildTree(tree) {\n        alphabet = new Set();\n        id_map = [];\n        // Prepare initial node\n        id = 0;\n        followpos = [];\n        this.type = CONCAT;\n        this.c1 = new Node();\n        this.c2 = new Node();\n        this.c2.buildNodes({ type: \"Char\", value: \"#\" });\n        this.c1.buildNodes(tree);\n        this.nullable = this.c1.nullable && this.c2.nullable;\n\n        // Set firstpos\n        this.firstpos = new Set(this.c1.firstpos);\n        if (this.c1.nullable) {\n            for (let each of this.c2.firstpos) {\n                this.firstpos.add(each);\n            }\n        }\n        // Set lastpos\n        this.lastpos = new Set(this.c2.lastpos);\n        if (this.c2.nullable) {\n            for (let each of this.c1.lastpos) {\n                this.lastpos.add(each);\n            }\n        }\n        // Set followpos\n        for (let i of this.c1.lastpos) {\n            for (let each of this.c2.firstpos) {\n                followpos[i].add(each);\n            }\n        }\n\n        alphabet.delete(\"#\");\n    }\n\n    /**\n     * Recursive function responsible to build the syntax tree.\n     *\n     * @param {object} tree The tree node to be processed\n     */\n    buildNodes(tree) {\n        if (tree === null) {\n            this.type = LEAF_EPSILON;\n            this.nullable = true;\n            this.firstpos = new Set();\n            this.lastpos = new Set();\n            return;\n        }\n        switch (tree.type) {\n            case \"Alternative\":\n                let last_element = tree.expressions[tree.expressions.length - 1];\n                if (tree.expressions.length > 2) {\n                    this.type = CONCAT;\n                    this.c1 = new Node();\n                    this.c2 = new Node();\n                    this.c2.buildNodes(last_element);\n                    tree.expressions.splice(-1, 1);\n                    this.c1.buildNodes(tree);\n                } else {\n                    this.type = CONCAT;\n                    this.c1 = new Node();\n                    this.c2 = new Node();\n                    this.c2.buildNodes(last_element);\n                    this.c1.buildNodes(tree.expressions[0]);\n                }\n                this.nullable = this.c1.nullable && this.c2.nullable;\n\n                // Set firstpos\n                this.firstpos = new Set(this.c1.firstpos);\n                if (this.c1.nullable) {\n                    for (let each of this.c2.firstpos) {\n                        this.firstpos.add(each);\n                    }\n                }\n\n                // Set lastpos\n                this.lastpos = new Set(this.c2.lastpos);\n                if (this.c2.nullable) {\n                    for (let each of this.c1.lastpos) {\n                        this.lastpos.add(each);\n                    }\n                }\n\n                // Set followpos\n                for (let i of this.c1.lastpos) {\n                    for (let each of this.c2.firstpos) {\n                        followpos[i].add(each);\n                    }\n                }\n\n                break;\n\n            case \"Disjunction\":\n                this.type = OR;\n                this.c1 = new Node();\n                this.c2 = new Node();\n                this.c2.buildNodes(tree.right);\n                this.c1.buildNodes(tree.left);\n                this.nullable = this.c1.nullable || this.c2.nullable;\n                this.firstpos = new Set(this.c1.firstpos);\n                for (let each of this.c2.firstpos) {\n                    this.firstpos.add(each);\n                }\n                this.lastpos = new Set(this.c1.lastpos);\n                for (let each of this.c2.lastpos) {\n                    this.lastpos.add(each);\n                }\n                break;\n\n            case \"Repetition\":\n                this.type = STAR;\n                this.c1 = new Node();\n                this.c2 = null;\n                this.c1.buildNodes(tree.expression);\n\n                this.nullable = true;\n                this.firstpos = new Set(this.c1.firstpos);\n                this.lastpos = new Set(this.c1.lastpos);\n\n                // Set followpos\n                for (let i of this.lastpos) {\n                    for (let each of this.firstpos) {\n                        followpos[i].add(each);\n                    }\n                }\n                break;\n\n            case \"Group\":\n                this.buildNodes(tree.expression);\n                break;\n\n            case \"Char\":\n                alphabet.add(tree.value);\n                id_map[id] = tree.value;\n\n                this.type = LEAF;\n                this.c1 = null;\n                this.c2 = null;\n                this.value = tree.value;\n                this.nullable = false;\n                this.firstpos = new Set([id]);\n                this.lastpos = new Set([id]);\n                followpos[id] = new Set();\n                this.id = id++;\n\n                break;\n\n            default:\n                break;\n        }\n    }\n}\n","import * as actionType from \"./ActionType\";\n\nexport const addLanguage = name => ({\n    type: actionType.ADD_LANGUAGE,\n    name: name\n});\n\nexport const selectLanguage = id => ({\n    type: actionType.SELECT_LANGUAGE,\n    selected_id: id\n});\n\nexport const removeLanguage = () => ({\n    type: actionType.REMOVE_LANGUAGE\n});\n\nexport const updateGrammar = text => ({\n    type: actionType.UPDATE_GRAMMAR,\n    text: text\n});\n\nexport const addState = state => ({\n    type: actionType.ADD_STATE,\n    state: state\n});\n\nexport const addSymbol = symbol => ({\n    type: actionType.ADD_SYMBOL,\n    symbol: symbol\n});\n\nexport const setInitial = symbol => ({\n    type: actionType.SET_INITIAL,\n    symbol: symbol\n});\n\nexport const addFinal = state => ({\n    type: actionType.ADD_FINAL,\n    state: state\n});\n\nexport const removeFinal = state => ({\n    type: actionType.REMOVE_FINAL,\n    state: state\n});\n\nexport const updateTransition = (state, to, symbol) => ({\n    type: actionType.UPDATE_TRANSITION,\n    state: state,\n    to: to,\n    symbol: symbol\n});\n\nexport const determinize = name => ({\n    type: actionType.DETERMINIZE,\n    name: name\n});\n\nexport const minimize = name => ({\n    type: actionType.MINIMIZE,\n    name: name\n});\n\nexport const union = id => ({\n    type: actionType.UNION,\n    id: id\n});\n\nexport const intersection = id => ({\n    type: actionType.INTERSECTION,\n    id: id\n});\n\nexport const updateRE = text => ({\n    type: actionType.UPDATE_RE,\n    text: text\n});\n\nexport const removeState = state => ({\n    type: actionType.REMOVE_STATE,\n    state: state\n});\n\nexport const removeSymbol = symbol => ({\n    type: actionType.REMOVE_SYMBOL,\n    symbol: symbol\n});\n","export const UNION = \"UNION\";\nexport const MINIMIZE = \"MINIMIZE\";\nexport const UPDATE_RE = \"UPDATE_RE\";\nexport const ADD_STATE = \"ADD_STATE\";\nexport const ADD_FINAL = \"ADD_FINAL\";\nexport const ADD_SYMBOL = \"ADD_SYMBOL\";\nexport const DETERMINIZE = \"DETERMINIZE\";\nexport const SET_INITIAL = \"SET_INITIAL\";\nexport const REMOVE_STATE = \"REMOVE_STATE\";\nexport const INTERSECTION = \"INTERSECTION\";\nexport const ADD_LANGUAGE = \"ADD_LANGUAGE\";\nexport const REMOVE_FINAL = \"REMOVE_FINAL\";\nexport const REMOVE_SYMBOL = \"REMOVE_SYMBOL\";\nexport const UPDATE_GRAMMAR = \"UPDATE_GRAMMAR\";\nexport const SELECT_LANGUAGE = \"SELECT_LANGUAGE\";\nexport const REMOVE_LANGUAGE = \"REMOVE_LANGUAGE\";\nexport const UPDATE_TRANSITION = \"UPDATE_TRANSITION\";\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addLanguage } from \"../actions\";\nimport { bindActionCreators } from \"redux\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst styles = theme => ({\n    extendedIcon: {\n        marginRight: theme.spacing.unit\n    },\n    button: {\n        margin: theme.spacing.unit\n    }\n});\n\nclass AddLanguage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputValue: \"\"\n        };\n        this.updateInputValue = this.updateInputValue.bind(this);\n    }\n\n    updateInputValue(evt) {\n        this.setState({\n            inputValue: evt.target.value\n        });\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div className=\"add-lang-container\" align=\"center\">\n                <TextField\n                    id=\"standard-name\"\n                    className={classes.textField}\n                    margin=\"normal\"\n                    type=\"text\"\n                    name=\"new-language-name\"\n                    value={this.state.inputValue}\n                    onChange={this.updateInputValue}\n                    placeholder=\"New Language Name\"\n                />\n                <Button\n                    variant=\"extendedFab\"\n                    color=\"primary\"\n                    aria-label=\"Add\"\n                    className={classes.button}\n                    onClick={e => {\n                        e.preventDefault();\n                        this.props.addLanguage(this.state.inputValue);\n                    }}\n                >\n                    <AddIcon className={classes.extendedIcon} />\n                    New Language\n                </Button>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ addLanguage }, dispatch);\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(withStyles(styles, { withTheme: true })(AddLanguage));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { removeLanguage } from \"../actions\";\nimport { bindActionCreators } from \"redux\";\nimport Button from \"@material-ui/core/Button\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst styles = theme => ({\n    extendedIcon: {\n        marginRight: theme.spacing.unit\n    },\n    button: {\n        backgroundColor: \"#eb7f00\",\n        color: \"white\",\n        margin: theme.spacing.unit\n    }\n});\n\nclass RemoveLanguage extends React.Component {\n    render() {\n        const { classes } = this.props;\n        return (\n            <div className=\"rm-lang-container\" align=\"center\">\n                <Button\n                    variant=\"extendedFab\"\n                    aria-label=\"Add\"\n                    className={classes.button}\n                    onClick={e => {\n                        e.preventDefault();\n                        this.props.removeLanguage();\n                    }}\n                >\n                    <DeleteIcon className={classes.extendedIcon} /> Remove Language\n                </Button>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ removeLanguage }, dispatch);\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(withStyles(styles)(RemoveLanguage));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { addLanguage } from \"../actions\";\nimport { removeLanguage } from \"../actions\";\nimport { selectLanguage } from \"../actions\";\n\nimport {\n    updateGrammar,\n    addState,\n    addSymbol,\n    setInitial,\n    addFinal,\n    removeFinal,\n    updateTransition,\n    determinize,\n    minimize,\n    union,\n    intersection,\n    updateRE,\n    removeState,\n    removeSymbol\n} from \"../actions\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Radio from \"@material-ui/core/Radio\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport Viz from \"viz.js\";\nimport { Module, render } from \"viz.js/full.render.js\";\n\nconst styles = theme => ({\n    textField: {\n        width: \"97%\",\n        margin: theme.spacing.unit\n    },\n    paper: {\n        margin: theme.spacing.unit\n    },\n    table: {\n        width: \"100%\"\n    },\n    head: {\n        backgroundColor: \"#eb7f00\",\n        color: theme.palette.common.white\n    },\n    inputCellState: {\n        border: \"none\"\n    },\n    inputCellTransition: {\n        border: \"none\"\n    },\n    buttonsContainer: {\n        margin: \"auto\",\n        display: \"table\",\n        padding: theme.spacing.unit\n    },\n    buttons: {\n        display: \"table-cell\",\n        padding: theme.spacing.unit\n    },\n    title: {\n        padding: theme.spacing.unit,\n        paddingTop: theme.spacing.unit * 2\n    }\n});\n\nclass LanguageList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            determinizeDialogOpen: false,\n            determinizeDialogName: \"\",\n            unionDialogOpen: false,\n            unionDialogName: \"\",\n            intersectionDialogOpen: false,\n            intersectionDialogName: \"\",\n            minimizeDialogOpen: false,\n            minimizeDialogName: \"\"\n        };\n    }\n\n    buildExamples() {\n        this.props.addLanguage(\"Grammar to AFND\");\n        this.props.updateGrammar(`A -> aB | bA\nB -> a | aC | bB\nC -> aD | b | bC\nD -> aD | bD`);\n        this.props.determinize(\"(ID: 0 -> Determinized)\");\n        this.props.addLanguage(\"Aux to UNION\");\n        this.props.updateGrammar(`A -> aA | bB\nB -> aB | b | bC\nC -> a | aC | b | bC`);\n        this.props.determinize(\"Aux to UNION\");\n        this.props.selectLanguage(2);\n        this.props.removeLanguage();\n        this.props.union(1);\n        this.props.determinize(\"(ID: 3 -> Determinized)\");\n        this.props.addLanguage(\"Aux to Minimize\");\n        this.props.updateGrammar(`A -> 0B | 1 | 1C\nB -> 0A | 1 | 1D\nC -> 0 | 0E | 1F\nD -> 0 | 0E | 1F\nE -> 0 | 0E | 1F\nF -> 0F | 1F`);\n        this.props.determinize(\"Aux to Minimize\");\n        this.props.selectLanguage(5);\n        this.props.removeLanguage();\n        this.props.minimize(\"(ID: 5 -> Minimal)\");\n        this.props.addLanguage(\"Aux to Intersection\");\n        this.props.updateGrammar(`A -> a | aB | bA\nB -> aC | b | bB\nC -> aC | bC`);\n        this.props.determinize(\"Aux to Intersection\");\n        this.props.selectLanguage(7);\n        this.props.removeLanguage();\n        this.props.addLanguage(\"Aux to Intersection\");\n        this.props.updateGrammar(`A -> aA | b | bB\nB -> a | aB | bC\nC -> aC | bC`);\n        this.props.determinize(\"Aux to Intersection\");\n        this.props.selectLanguage(8);\n        this.props.removeLanguage();\n        this.props.intersection(7);\n        this.props.addLanguage(\"RegularExp to DFA\");\n        this.props.updateRE(\n            `(aa|bb|(ab|ba)(aa|bb)*(ab|ba))*a(aa|bb|(ab|ba)(aa|bb)*(ab|ba))*b(aa|bb|(ab|ba)(aa|bb)*(ab|ba))*|(aa|bb|(ab|ba)(aa|bb)*(ab|ba))*b(aa|bb|(ab|ba)(aa|bb)*(ab|ba))*a(aa|bb|(ab|ba)(aa|bb)*(ab|ba))*`\n        );\n    }\n\n    checkForGraph = () => {\n        const viz = new Viz({ Module, render });\n        let fa = this.props.reducer.languages[this.props.reducer.selected_language].fa;\n\n        let transitions = \"\";\n        for (let state of fa.states) {\n            for (let symbol of fa.alphabet) {\n                if (fa.transitions[state][symbol].to.size) {\n                    for (let to of fa.transitions[state][symbol].to) {\n                        transitions += `${state} -> ${to} [label =\"${symbol === \"&\" ? \"\\\\\" + symbol : symbol}\"]`;\n                        transitions += \"\\n\";\n                    }\n                }\n            }\n        }\n\n        let graph = `digraph G {\n    rankdir=LR;\n    size=\"8,5\"\n\n    node [shape = point]; start\n\n    node [shape = doublecircle];\n    ${[...fa.finals].join(\" \")}\n\n    node [shape = circle];\n    start -> ${fa.initial}\n    ${transitions}\n}`;\n\n        viz.renderSVGElement(graph)\n            .then(function(element) {\n                let count = document.getElementById(\"graphCard\").childElementCount;\n                if (count === 0) {\n                    document.getElementById(\"graphCard\").appendChild(element);\n                } else {\n                    let item = document.getElementById(\"graphCard\");\n                    item.replaceChild(element, item.childNodes[0]);\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n\n    tableHeader() {\n        let table_header = [\"⟶\", \"Final?\", \"State\"];\n        if (this.props.reducer.languages[this.props.reducer.selected_language].fa.alphabet)\n            table_header = [\n                ...table_header,\n                ...this.props.reducer.languages[this.props.reducer.selected_language].fa.alphabet\n            ];\n        return table_header;\n    }\n\n    tableBody() {\n        const { classes } = this.props;\n\n        if (\n            this.props.reducer.languages[this.props.reducer.selected_language].fa.states === undefined ||\n            !this.props.reducer.languages[this.props.reducer.selected_language].fa.states.size\n        )\n            return;\n\n        return [...this.props.reducer.languages[this.props.reducer.selected_language].fa.states].map((state, id) => {\n            return (\n                <TableRow key={id + state}>\n                    <TableCell component=\"th\" scope=\"row\">\n                        <Radio\n                            value={state}\n                            checked={\n                                this.props.reducer.languages[this.props.reducer.selected_language].fa.initial === state\n                            }\n                            onClick={e => {\n                                e.preventDefault();\n                                this.props.setInitial(e.target.value);\n                            }}\n                        />\n                    </TableCell>\n                    <TableCell component=\"th\" scope=\"row\">\n                        <Checkbox\n                            checked={this.props.reducer.languages[this.props.reducer.selected_language].fa.finals.has(\n                                state\n                            )}\n                            value={state}\n                            onChange={e => {\n                                e.preventDefault();\n                                if (e.target.checked) {\n                                    this.props.addFinal(e.target.value);\n                                } else {\n                                    this.props.removeFinal(e.target.value);\n                                }\n                            }}\n                        />\n                    </TableCell>\n                    <TableCell component=\"th\" scope=\"row\">\n                        <Button\n                            size=\"small\"\n                            aria-label=\"delete-state\"\n                            className={classes.button}\n                            onClick={e => {\n                                e.preventDefault();\n                                this.props.removeState(state);\n                            }}\n                        >\n                            <Typography variant=\"subtitle1\">{state}</Typography>\n                            <DeleteIcon color=\"action\" />\n                        </Button>\n                    </TableCell>\n                    {[...this.props.reducer.languages[this.props.reducer.selected_language].fa.alphabet].map(\n                        (symbol, id) => {\n                            return (\n                                <TableCell component=\"th\" scope=\"row\" key={state + symbol + id}>\n                                    <input\n                                        size={\n                                            this.props.reducer.languages[this.props.reducer.selected_language].fa\n                                                .transitions[state][symbol].text.length + 1\n                                        }\n                                        value={\n                                            this.props.reducer.languages[this.props.reducer.selected_language].fa\n                                                .transitions[state][symbol].text\n                                        }\n                                        style={\n                                            this.props.reducer.languages[\n                                                this.props.reducer.selected_language\n                                            ].fa.transitions[state][symbol].text.indexOf(\" \") === -1\n                                                ? { backgroundColor: \"#ffdddd\" }\n                                                : {}\n                                        }\n                                        className={classes.inputCellTransition}\n                                        onChange={e => {\n                                            e.target.width = e.target.value.length;\n                                            e.target.value = e.target.value.toUpperCase();\n                                            this.props.updateTransition(state, e.target.value, symbol);\n                                        }}\n                                    />\n                                </TableCell>\n                            );\n                        }\n                    )}\n                </TableRow>\n            );\n        });\n    }\n\n    render() {\n        const { classes } = this.props;\n        let info;\n        let grammar_text;\n        let re_text;\n\n        if (!this.props.reducer.languages.length) {\n            info = (\n                <div>\n                    <Typography variant=\"h6\">\n                        Please, add a new language OR{\" \"}\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={e => {\n                                e.preventDefault();\n                                this.buildExamples();\n                            }}\n                        >\n                            Build Examples\n                        </Button>\n                    </Typography>\n                </div>\n            );\n        } else {\n            grammar_text = this.props.reducer.languages[this.props.reducer.selected_language].grammar.text;\n            re_text = this.props.reducer.languages[this.props.reducer.selected_language].re.text;\n            info = (\n                <div className=\"language-all-info\">\n                    <Grid container spacing={8} alignItems=\"stretch\">\n                        <Grid item xs={6}>\n                            <div className=\"grammar-input-area\">\n                                <Paper className={classes.paper}>\n                                    <TextField\n                                        id=\"outlined-multiline-flexible\"\n                                        label=\"Regular Grammar\"\n                                        multiline\n                                        error={\n                                            !this.props.reducer.languages[this.props.reducer.selected_language].grammar\n                                                .valid &&\n                                            this.props.reducer.languages[this.props.reducer.selected_language].grammar\n                                                .text !== \"\"\n                                        }\n                                        rowsMax=\"10\"\n                                        value={grammar_text}\n                                        onChange={e => {\n                                            e.preventDefault();\n                                            this.props.updateGrammar(e.target.value);\n                                        }}\n                                        className={classes.textField}\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                        placeholder=\"S -> a | aS | &\"\n                                    />\n                                </Paper>\n                            </div>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <div className=\"re-input-area\">\n                                <Paper className={classes.paper}>\n                                    <TextField\n                                        id=\"outlined-multiline-flexible2\"\n                                        label=\"Regular Expression\"\n                                        multiline\n                                        error={\n                                            !this.props.reducer.languages[this.props.reducer.selected_language].re\n                                                .valid &&\n                                            this.props.reducer.languages[this.props.reducer.selected_language].re\n                                                .text !== \"\"\n                                        }\n                                        rowsMax=\"10\"\n                                        value={re_text}\n                                        onChange={e => {\n                                            e.preventDefault();\n                                            this.props.updateRE(e.target.value);\n                                        }}\n                                        className={classes.textField}\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                        placeholder=\"(a|b)*abb\"\n                                    />\n                                </Paper>\n                            </div>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <div className=\"table-input-area\">\n                                <Paper className={classes.paper}>\n                                    <Typography variant=\"h5\" className={classes.title}>\n                                        Finite Automata - Transition table\n                                    </Typography>\n                                    <Table className={classes.table}>\n                                        <TableHead>\n                                            <TableRow>\n                                                {this.tableHeader().map((element, id) => {\n                                                    return id < 3 ? (\n                                                        <TableCell\n                                                            className={classes.head}\n                                                            width=\"12px\"\n                                                            component=\"th\"\n                                                            scope=\"row\"\n                                                            key={id}\n                                                        >\n                                                            {element}\n                                                        </TableCell>\n                                                    ) : (\n                                                        <TableCell\n                                                            className={classes.head}\n                                                            width=\"12px\"\n                                                            component=\"th\"\n                                                            scope=\"row\"\n                                                            key={id}\n                                                        >\n                                                            {element}\n                                                            <Button\n                                                                size=\"small\"\n                                                                aria-label=\"delete-state\"\n                                                                className={classes.button}\n                                                                onClick={e => {\n                                                                    e.preventDefault();\n                                                                    this.props.removeSymbol(element);\n                                                                }}\n                                                            >\n                                                                <DeleteIcon color=\"action\" />\n                                                            </Button>\n                                                        </TableCell>\n                                                    );\n                                                })}\n                                                <TableCell\n                                                    width=\"69px\"\n                                                    className={classes.head}\n                                                    component=\"th\"\n                                                    scope=\"row\"\n                                                    key={\"new-symbol-column\"}\n                                                >\n                                                    <input\n                                                        size=\"12\"\n                                                        maxLength=\"1\"\n                                                        pattern=\"[a-z0-9]\"\n                                                        className={classes.inputCellSymbol}\n                                                        placeholder=\"Input new symbol\"\n                                                        onChange={e => {\n                                                            e.target.value = e.target.value.toLowerCase();\n                                                        }}\n                                                        onKeyPress={e => {\n                                                            let regex = /[a-z]|[0-9]|&/;\n                                                            if (e.key === \"Enter\" && regex.test(e.target.value)) {\n                                                                this.props.addSymbol(e.target.value);\n                                                                e.target.value = \"\";\n                                                            }\n                                                        }}\n                                                    />\n                                                    {/*<span> Input new symbol</span>*/}\n                                                </TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {this.tableBody()}\n                                            <TableRow key={\"new-state-row\"}>\n                                                <TableCell component=\"th\" scope=\"row\" />\n                                                <TableCell component=\"th\" scope=\"row\" />\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    <input\n                                                        size=\"10\"\n                                                        maxLength=\"1\"\n                                                        placeholder=\"Input new state.\"\n                                                        className={classes.inputCellState}\n                                                        onChange={e => {\n                                                            e.target.value = e.target.value.toUpperCase();\n                                                        }}\n                                                        onKeyPress={e => {\n                                                            let regex = /[A-Z]/;\n                                                            if (e.key === \"Enter\" && regex.test(e.target.value)) {\n                                                                this.props.addState(e.target.value);\n                                                                e.target.value = \"\";\n                                                            }\n                                                        }}\n                                                    />\n                                                </TableCell>\n                                            </TableRow>\n                                        </TableBody>\n                                    </Table>\n                                    <div className={classes.buttonsContainer}>\n                                        <div id=\"determinize-container\" className={classes.buttons}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                disabled={\n                                                    !this.props.reducer.languages[\n                                                        this.props.reducer.selected_language\n                                                    ].fa.isFiniteAutomata()\n                                                }\n                                                onClick={e => {\n                                                    this.setState({ determinizeDialogOpen: true });\n                                                }}\n                                            >\n                                                Determinize\n                                            </Button>\n                                            <Dialog\n                                                open={this.state.determinizeDialogOpen}\n                                                onClose={e => {\n                                                    this.setState({ determinizeDialogOpen: false });\n                                                }}\n                                                aria-labelledby=\"form-dialog-title\"\n                                            >\n                                                <DialogTitle id=\"form-dialog-title\">Determinizing FA</DialogTitle>\n                                                <DialogContent>\n                                                    <DialogContentText>\n                                                        Please inform a name to the resultant DFA.\n                                                    </DialogContentText>\n                                                    <TextField\n                                                        autoFocus\n                                                        margin=\"dense\"\n                                                        id=\"name\"\n                                                        label=\"Name\"\n                                                        type=\"text\"\n                                                        fullWidth\n                                                        onChange={e => {\n                                                            this.setState({ determinizeDialogName: e.target.value });\n                                                        }}\n                                                    />\n                                                </DialogContent>\n                                                <DialogActions>\n                                                    <Button\n                                                        onClick={e => {\n                                                            this.setState({ determinizeDialogOpen: false });\n                                                        }}\n                                                        color=\"primary\"\n                                                    >\n                                                        Cancel\n                                                    </Button>\n                                                    <Button\n                                                        onClick={e => {\n                                                            this.props.determinize(this.state.determinizeDialogName);\n                                                            this.setState({ determinizeDialogOpen: false });\n                                                            this.checkForGraph();\n                                                        }}\n                                                        color=\"primary\"\n                                                    >\n                                                        Confirm\n                                                    </Button>\n                                                </DialogActions>\n                                            </Dialog>\n                                        </div>\n                                        <div id=\"union-container\" className={classes.buttons}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                disabled={\n                                                    !this.props.reducer.languages[this.props.reducer.selected_language]\n                                                        .fa.determinized\n                                                }\n                                                onClick={e => {\n                                                    this.setState({ unionDialogOpen: true });\n                                                }}\n                                            >\n                                                Union\n                                            </Button>\n                                            <Dialog\n                                                open={this.state.unionDialogOpen}\n                                                onClose={e => {\n                                                    this.setState({ unionDialogOpen: false });\n                                                }}\n                                                aria-labelledby=\"form-dialog-title\"\n                                            >\n                                                <DialogTitle id=\"form-dialog-title\">Union of DFA's</DialogTitle>\n                                                <DialogContent>\n                                                    <DialogContentText>\n                                                        Please inform the ID of other DFA.\n                                                    </DialogContentText>\n                                                    <TextField\n                                                        autoFocus\n                                                        margin=\"dense\"\n                                                        id=\"name\"\n                                                        label=\"Name\"\n                                                        type=\"text\"\n                                                        fullWidth\n                                                        onChange={e => {\n                                                            this.setState({ unionDialogName: e.target.value });\n                                                        }}\n                                                    />\n                                                </DialogContent>\n                                                <DialogActions>\n                                                    <Button\n                                                        onClick={e => {\n                                                            this.setState({ unionDialogOpen: false });\n                                                        }}\n                                                        color=\"primary\"\n                                                    >\n                                                        Cancel\n                                                    </Button>\n                                                    <Button\n                                                        onClick={e => {\n                                                            this.props.union(this.state.unionDialogName);\n                                                            this.setState({ unionDialogOpen: false });\n                                                            this.checkForGraph();\n                                                        }}\n                                                        color=\"primary\"\n                                                    >\n                                                        Confirm\n                                                    </Button>\n                                                </DialogActions>\n                                            </Dialog>\n                                        </div>\n                                        <div id=\"intersection-container\" className={classes.buttons}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                disabled={\n                                                    !this.props.reducer.languages[this.props.reducer.selected_language]\n                                                        .fa.determinized\n                                                }\n                                                onClick={e => {\n                                                    this.setState({ intersectionDialogOpen: true });\n                                                }}\n                                            >\n                                                Intersection\n                                            </Button>\n                                            <Dialog\n                                                open={this.state.intersectionDialogOpen}\n                                                onClose={e => {\n                                                    this.setState({ intersectionDialogOpen: false });\n                                                }}\n                                                aria-labelledby=\"form-dialog-title\"\n                                            >\n                                                <DialogTitle id=\"form-dialog-title\">Intersection of DFA's</DialogTitle>\n                                                <DialogContent>\n                                                    <DialogContentText>\n                                                        Please inform the ID of other DFA.\n                                                    </DialogContentText>\n                                                    <TextField\n                                                        autoFocus\n                                                        margin=\"dense\"\n                                                        id=\"name\"\n                                                        label=\"Name\"\n                                                        type=\"text\"\n                                                        fullWidth\n                                                        onChange={e => {\n                                                            this.setState({ intersectionDialogName: e.target.value });\n                                                        }}\n                                                    />\n                                                </DialogContent>\n                                                <DialogActions>\n                                                    <Button\n                                                        onClick={e => {\n                                                            this.setState({ intersectionDialogOpen: false });\n                                                        }}\n                                                        color=\"primary\"\n                                                    >\n                                                        Cancel\n                                                    </Button>\n                                                    <Button\n                                                        onClick={e => {\n                                                            this.props.intersection(this.state.intersectionDialogName);\n                                                            this.setState({ intersectionDialogOpen: false });\n                                                            this.checkForGraph();\n                                                        }}\n                                                        color=\"primary\"\n                                                    >\n                                                        Confirm\n                                                    </Button>\n                                                </DialogActions>\n                                            </Dialog>\n                                        </div>\n                                        <div id=\"minimize-container\" className={classes.buttons}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                disabled={\n                                                    !this.props.reducer.languages[this.props.reducer.selected_language]\n                                                        .fa.determinized\n                                                }\n                                                onClick={e => {\n                                                    this.setState({ minimizeDialogOpen: true });\n                                                }}\n                                            >\n                                                Minimize\n                                            </Button>\n                                            <Dialog\n                                                open={this.state.minimizeDialogOpen}\n                                                onClose={e => {\n                                                    this.setState({ minimizeDialogOpen: false });\n                                                }}\n                                                aria-labelledby=\"form-dialog-title\"\n                                            >\n                                                <DialogTitle id=\"form-dialog-title\">Minimization of DFA</DialogTitle>\n                                                <DialogContent>\n                                                    <DialogContentText>\n                                                        Please inform a name to the resultant DFA.\n                                                    </DialogContentText>\n                                                    <TextField\n                                                        autoFocus\n                                                        margin=\"dense\"\n                                                        id=\"name\"\n                                                        label=\"Name\"\n                                                        type=\"text\"\n                                                        fullWidth\n                                                        onChange={e => {\n                                                            this.setState({ minimizeDialogName: e.target.value });\n                                                        }}\n                                                    />\n                                                </DialogContent>\n                                                <DialogActions>\n                                                    <Button\n                                                        onClick={e => {\n                                                            this.setState({ minimizeDialogOpen: false });\n                                                        }}\n                                                        color=\"primary\"\n                                                    >\n                                                        Cancel\n                                                    </Button>\n                                                    <Button\n                                                        onClick={e => {\n                                                            this.props.minimize(this.state.minimizeDialogName);\n                                                            this.setState({ minimizeDialogOpen: false });\n                                                            this.checkForGraph();\n                                                        }}\n                                                        color=\"primary\"\n                                                    >\n                                                        Confirm\n                                                    </Button>\n                                                </DialogActions>\n                                            </Dialog>\n                                        </div>\n                                        <span className={classes.buttons}>\n                                            {this.props.reducer.languages[\n                                                this.props.reducer.selected_language\n                                            ].fa.isFiniteAutomata()\n                                                ? \"Valid finite automata\"\n                                                : \"It is not a valid finite automata\"}\n                                        </span>\n                                    </div>\n                                </Paper>\n                            </div>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Paper className={classes.paper}>\n                                <Typography variant=\"h5\" className={classes.title}>\n                                    Graphical Representation\n                                </Typography>\n                                <Divider />\n                                <div id=\"graphCard\">\n                                    {this.props.reducer.languages[\n                                        this.props.reducer.selected_language\n                                    ].fa.isFiniteAutomata() ? (\n                                        this.checkForGraph()\n                                    ) : (\n                                        <div className={classes.textField}>Waiting for valid automata...</div>\n                                    )}\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </div>\n            );\n        }\n\n        return <div className=\"language-detail\">{info}</div>;\n    }\n}\n\nconst mapStateToProps = state => ({ reducer: state.languageReducer });\n\nconst mapDispatchToProps = dispatch =>\n    bindActionCreators(\n        {\n            updateGrammar,\n            addState,\n            addSymbol,\n            setInitial,\n            addFinal,\n            removeFinal,\n            updateTransition,\n            determinize,\n            minimize,\n            union,\n            intersection,\n            updateRE,\n            removeState,\n            removeSymbol,\n            addLanguage,\n            removeLanguage,\n            selectLanguage\n        },\n        dispatch\n    );\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withStyles(styles, { withTheme: true })(LanguageList));\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport logo from \"../logo.svg\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport AddLanguage from \"../containers/AddLanguage\";\nimport RemoveLanguage from \"../containers/RemoveLanguage\";\nimport { selectLanguage } from \"../actions\";\n\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Divider from \"@material-ui/core/Divider\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport LanguageList from \"../containers/LanguageList\";\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        height: \"100%\",\n        zIndex: 1,\n        overflow: \"hidden\",\n        position: \"relative\",\n        display: \"flex\",\n        width: \"100%\"\n    },\n    appBar: {\n        position: \"absolute\",\n        marginLeft: drawerWidth,\n        [theme.breakpoints.up(\"md\")]: {\n            width: `calc(100% - ${drawerWidth}px)`\n        }\n    },\n    navIconHide: {\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"none\"\n        }\n    },\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n        width: drawerWidth,\n        height: \"100vh\",\n        [theme.breakpoints.up(\"md\")]: {\n            position: \"relative\"\n        }\n    },\n    content: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.default,\n        padding: theme.spacing.unit * 3\n    },\n    listItem: {\n        \"&:focus\": {\n            backgroundColor: \"#eb7f00\",\n            \"& $primary, & $icon\": {\n                color: theme.palette.common.white\n            }\n        }\n    }\n});\n\nclass ResponsiveDrawer extends React.Component {\n    state = {\n        mobileOpen: false\n    };\n\n    handleDrawerToggle = () => {\n        this.setState(state => ({ mobileOpen: !state.mobileOpen }));\n    };\n\n    render() {\n        const { classes, theme } = this.props;\n\n        const drawer = (\n            <div>\n                <Toolbar>\n                    <img src={logo} alt=\"logo\" width=\"100%\" />\n                </Toolbar>\n                <Divider />\n                <div className=\"language-list-cotainer\">\n                    <List component=\"nav\" className={classes.listItem}>\n                        {this.props.reducer.languages.map((language, id) => {\n                            return (\n                                <ListItem\n                                    className={classes.listItem}\n                                    button\n                                    selected={id === this.props.reducer.selected_language}\n                                    key={id}\n                                    onClick={e => {\n                                        e.preventDefault();\n                                        this.props.selectLanguage(id);\n                                    }}\n                                >\n                                    <Typography noWrap color=\"inherit\">\n                                        {\" ID: \" + id + \"  -  \" + language.name}\n                                    </Typography>\n                                </ListItem>\n                            );\n                        })}\n                    </List>\n                </div>\n\n                <AddLanguage />\n                <RemoveLanguage />\n                <Toolbar />\n            </div>\n        );\n\n        return (\n            <div className={classes.root}>\n                <AppBar className={classes.appBar}>\n                    <Toolbar>\n                        <IconButton\n                            color=\"inherit\"\n                            aria-label=\"Open drawer\"\n                            onClick={this.handleDrawerToggle}\n                            className={classes.navIconHide}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"title\" color=\"inherit\" noWrap>\n                            INE5421 - Linguagens Formais e Compiladores\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <Hidden mdUp>\n                    <Drawer\n                        variant=\"temporary\"\n                        anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n                        open={this.state.mobileOpen}\n                        onClose={this.handleDrawerToggle}\n                        classes={{\n                            paper: classes.drawerPaper\n                        }}\n                        ModalProps={{\n                            keepMounted: true // Better open performance on mobile.\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n                <Hidden smDown implementation=\"css\">\n                    <Drawer\n                        variant=\"permanent\"\n                        open\n                        classes={{\n                            paper: classes.drawerPaper\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n                <main className={classes.content}>\n                    <div className={classes.toolbar} />\n                    <LanguageList />\n                </main>\n            </div>\n        );\n    }\n}\n\nResponsiveDrawer.propTypes = {\n    classes: PropTypes.object.isRequired,\n    theme: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({ reducer: state.languageReducer });\n\nconst mapDispatchToProps = dispatch =>\n    bindActionCreators(\n        {\n            selectLanguage\n        },\n        dispatch\n    );\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withStyles(styles, { withTheme: true })(ResponsiveDrawer));\n","import React from \"react\";\nimport LanguageList from \"../components/ResponsiveDrawer\";\n// import LanguageList from \"../containers/LanguageList\";\n\nconst App = () => {\n    return (\n        <div className=\"container\">\n            <LanguageList />\n        </div>\n    );\n};\nexport default App;\n","/**\n * @file Manages Grammar structures, conversion to NFA and build from DFA.\n * @author Bruno Marques do Nascimento\n */\n\nimport XRegExp from \"xregexp\";\n\nconst line_regex = XRegExp(\n    [\n        \"^(?<head>\\\\s*([A-Z])\\\\s*)->(?<body>\\\\s*\",\n        \"(\",\n        \"((&\\\\s*)|(([a-z]|[0-9])([A-Z])\\\\s*)|(([a-z]|[0-9])\\\\s*))\",\n        \"((\\\\|\\\\s*&\\\\s*)|(\\\\|\\\\s*(([a-z]|[0-9])([A-Z])\\\\s*)|(\\\\|\\\\s*([a-z]|[0-9])\\\\s*)))*\",\n        \"\\\\s*))$\"\n    ].join(\"\")\n);\n\nexport default class Grammar {\n    constructor(text = \"\", Vt, Vn, P, S, valid = false) {\n        this.text = text;\n        this.Vt = Vt;\n        this.Vn = Vn;\n        this.P = P;\n        this.S = S;\n        this.valid = valid;\n    }\n\n    /**\n     * Extract grammar elements from a value from UI\n     *\n     * @return {grammar}\n     */\n    extractElements() {\n        this.reset();\n\n        // Remove new line whit null behind\n        let lines = this.text.replace(/(?<!([a-z]|&|[0-9]|[A-Z]))\\n/g, \"\");\n\n        // Remove new line whit null ahead\n        lines = lines.replace(/\\n(?!([a-z]|&|[0-9]|[A-Z]))/g, \"\");\n\n        // Split input in multiple lines\n        lines = lines.split(\"\\n\");\n\n        for (let i = 0; i < lines.length; i++) {\n            // Check if is a valid line with regex\n            const first_check = XRegExp.exec(lines[i], line_regex);\n            if (first_check === null) {\n                this.reset();\n                return this;\n            }\n            // If valid, remove spaces from input\n            lines[i] = lines[i].replace(/[ \\t\\r]+/g, \"\");\n            const production = XRegExp.exec(lines[i], line_regex);\n\n            if (i === 0) this.S = production.head;\n\n            // Extracting production rules\n            production.body.split(\"|\").forEach(element => {\n                if (this.P[production.head] === undefined) this.P[production.head] = new Set();\n                this.P[production.head].add(element);\n            });\n        }\n        this.Vt = this.extractTerminals(this.P);\n        this.Vn = this.extractNonTerminals(this.P);\n        this.valid = true;\n        return this;\n    }\n\n    /**\n     * Extract terminal elements from rule\n     *\n     * @return {set}\n     */\n    extractTerminals(rules) {\n        let terminals = new Set();\n        for (let head in rules)\n            rules[head].forEach(element => {\n                terminals.add(element.charAt(0));\n            });\n        return terminals;\n    }\n\n    /**\n     * Extract non terminals elements from rule\n     *\n     * @return {set}\n     */\n    extractNonTerminals(rules) {\n        let non_terminals = new Set();\n        for (let head in rules) {\n            non_terminals.add(head);\n            rules[head].forEach(element => {\n                if (element.length > 1) non_terminals.add(element.charAt(1));\n            });\n        }\n        return non_terminals;\n    }\n\n    /**\n     * Reset the Grammar structures\n     */\n    reset() {\n        this.Vt = new Set();\n        this.Vn = new Set();\n        this.P = {};\n        this.S = null;\n        this.valid = false;\n    }\n\n    /**\n     * Build a Grammar from a DFA\n     *\n     * @return {grammar}\n     */\n    buildFromDFA(dfa) {\n        this.reset();\n        this.Vt = new Set(dfa.alphabet);\n        this.Vn = new Set(dfa.states);\n        this.valid = true;\n        this.S = dfa.initial;\n\n        // Remove accept states whitout transitions from Vn to build the grammar\n        let Vn_filtered = new Set(this.Vn);\n        for (let state of Vn_filtered) {\n            if (dfa.finals.has(state)) {\n                let counter = 0;\n                for (let symbol of this.Vt) {\n                    counter += dfa.transitions[state][symbol].to.size;\n                }\n                if (!counter) Vn_filtered.delete(state);\n            }\n        }\n\n        this.P[this.S] = new Set();\n        for (let symbol of this.Vt) {\n            let to = dfa.transitions[this.S][symbol].text.slice(1);\n            if (dfa.transitions[this.S][symbol].to.size > 0) {\n                if (dfa.finals.has(to)) {\n                    this.P[this.S].add(symbol);\n                    if (Vn_filtered.has(to)) {\n                        this.P[this.S].add(symbol + to);\n                    }\n                } else {\n                    this.P[this.S].add(symbol + to);\n                }\n            }\n        }\n\n        this.text = this.S + \" -> \" + [...this.P[this.S]].join(\" | \") + \"\\n\";\n\n        let Vn_whitout_S = new Set(Vn_filtered);\n        Vn_whitout_S.delete(this.S);\n        for (let Vn of Vn_whitout_S) {\n            this.P[Vn] = new Set();\n            for (let symbol of this.Vt) {\n                // remove space from beggining of text\n                let to = dfa.transitions[Vn][symbol].text.slice(1);\n                if (dfa.transitions[Vn][symbol].to.size > 0) {\n                    if (dfa.finals.has(to)) {\n                        this.P[Vn].add(symbol);\n                        if (Vn_filtered.has(to)) {\n                            this.P[Vn].add(symbol + to);\n                        }\n                    } else {\n                        this.P[Vn].add(symbol + to);\n                    }\n                }\n            }\n            if (this.P[Vn].size) {\n                this.text += Vn + \" -> \" + [...this.P[Vn]].join(\" | \") + \"\\n\";\n            }\n        }\n        this.text = this.text.slice(0, -1);\n    }\n}\n","/**\n * @file Manages Finite Automata structures, including NFA and DFA.\n * @author Bruno Marques do Nascimento\n */\n\nconst ACCEPT_STATE = \"☢\";\n\nexport default class FA {\n    constructor(states = new Set(), alphabet = new Set(), transitions = [], initial = \"\", finals = new Set()) {\n        this.states = states;\n        this.alphabet = alphabet;\n        this.transitions = transitions;\n        this.initial = initial;\n        this.finals = finals;\n        this.determinized = false;\n    }\n\n    /**\n     * Reset Finite Automata structures\n     */\n    reset() {\n        this.states = new Set();\n        this.alphabet = new Set();\n        this.transitions = [];\n        this.initial = \"\";\n        this.finals = new Set();\n        this.determinized = false;\n    }\n\n    /**\n     * Build a NFA from a given grammar\n     *\n     * @param {grammar} grammr The grammar\n     * @returns {fa}\n     */\n    buildFromGrammar(grammar) {\n        this.reset();\n\n        // If not valid don't build DFA\n        if (!grammar.valid) return this;\n\n        let epsilonAtInitial = false;\n\n        // Treat epsilon\n        for (let head in grammar.P) {\n            if (head === grammar.S) {\n                if (grammar.P[head].has(\"&\")) epsilonAtInitial = true;\n            } else {\n                if (grammar.P[head].has(\"&\")) {\n                    alert(\"Should not have epsilon transitions in other productions than the initial\");\n                    this.reset();\n                    return this;\n                }\n            }\n        }\n\n        // Prevent productions to a production with epsilon\n        if (epsilonAtInitial) {\n            for (let head in grammar.P) {\n                grammar.P[head].forEach(element => {\n                    if (element.length === 2 && element.charAt(1) === grammar.S) {\n                        alert(\"Should not have a transition to the intial state having epsilon\");\n                        this.reset();\n                        return this;\n                    }\n                });\n            }\n        }\n        let states = new Set([...grammar.Vn, ACCEPT_STATE]);\n        let alphabet = new Set([...grammar.Vt]);\n        let transitions = [];\n        let initial = grammar.S;\n        let finals = epsilonAtInitial ? new Set([...grammar.S, ACCEPT_STATE]) : new Set([ACCEPT_STATE]);\n\n        // Build transitions\n        for (let state of states) {\n            transitions[state] = [];\n            for (let symbol of alphabet) {\n                transitions[state][symbol] = { to: new Set(), text: \" -\" };\n            }\n        }\n        for (let head in grammar.P) {\n            grammar.P[head].forEach(element => {\n                if (element.length === 1) {\n                    transitions[head][element].to.add(ACCEPT_STATE);\n                    transitions[head][element].text = \" \" + [...transitions[head][element].to].sort().join(\", \");\n                } else {\n                    transitions[head][element.charAt(0)].to.add(element.charAt(1));\n                    transitions[head][element.charAt(0)].text =\n                        \" \" + [...transitions[head][element.charAt(0)].to].sort().join(\", \");\n                }\n            });\n        }\n\n        this.states = states;\n        this.alphabet = alphabet;\n        this.transitions = transitions;\n        this.initial = initial;\n        this.finals = finals;\n    }\n\n    /**\n     * Check if the automata is deterministic\n     *\n     * @returns {bool}\n     */\n    isDeterministic() {\n        let alphabet = [...this.alphabet];\n        let states = [...this.states];\n        for (let state in states) {\n            for (let symbol in alphabet) {\n                if (this.transitions[states[state]][alphabet[symbol]].to.size > 1) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Add a state to the Finite Automata\n     *\n     * @param {string} state The state to be add\n     */\n    addState(state) {\n        if (!this.states.has(state)) {\n            this.states.add(state);\n            // Update transition array\n            this.transitions[state] = [];\n            for (let symbol of this.alphabet) {\n                this.transitions[state][symbol] = { to: new Set(), text: \" -\" };\n            }\n        }\n    }\n\n    /**\n     * Delete a state of the Finite Automata\n     *\n     * @param {string} state The state to be removed\n     */\n    deleteState(state) {\n        if (this.states.delete(state)) {\n            // Refactor transitions\n            for (let s of this.states) {\n                for (let symbol of this.alphabet) {\n                    this.transitions[s][symbol].to.delete(state);\n                    this.transitions[s][symbol].text = this.transitions[s][symbol].to.size\n                        ? \" \" + [...this.transitions[s][symbol].to].sort().join(\", \")\n                        : \" -\";\n                }\n            }\n            delete this.transitions[state];\n            this.finals.delete(state);\n            if (this.initial === state) {\n                this.initial = \"\";\n            }\n        }\n    }\n\n    /**\n     * Add a symbol to the Finite Automata\n     *\n     * @param {string} symbol The symbol to be add\n     */\n    addSymbol(symbol) {\n        if (!this.alphabet.has(symbol)) {\n            this.alphabet.add(symbol);\n            // Update transition array\n            for (let state of this.states) {\n                this.transitions[state][symbol] = { to: new Set(), text: \" -\" };\n            }\n        }\n    }\n\n    /**\n     * Delete a symbol of the Finite Automata\n     *\n     * @param {string} symbol The symbol to be deleted\n     */\n    deleteSymbol(symbol) {\n        if (this.alphabet.delete(symbol)) {\n            for (let state of this.states) {\n                delete this.transitions[state][symbol];\n            }\n        }\n    }\n\n    /**\n     * Set the initial state of the Finite Automata\n     *\n     * @param {string} initial The state to turn initial\n     */\n    setInitial(initial) {\n        this.initial = initial;\n    }\n\n    /**\n     * Add final state to the Finite Automata\n     *\n     * @param {string} state The state to be add to finals states\n     */\n    addFinal(state) {\n        this.finals.add(state);\n    }\n\n    /**\n     * Remove final state of the Finite Automata\n     *\n     * @param {string} state The state to be remove from finals states\n     */\n    removeFinal(state) {\n        this.finals.delete(state);\n    }\n\n    /**\n     * Update the transition table\n     *\n     * @param {string} state The state selected\n     * @param {string} symbol The symbol selected\n     * @param {string} value Input value from UI\n     */\n    updateTransition(state, value, symbol) {\n        // Remove spaces from input\n        value = value.replace(/[ \\t\\r]+/g, \"\");\n        let regex = /^((-?([A-Z☢]))(,+([A-Z☢]))*)$/;\n        if (!regex.test(value) && value !== \"\") {\n            this.transitions[state][symbol].text = value;\n            return false;\n        }\n        this.determinized = false;\n\n        value = value.replace(/[ -]+/g, \"\");\n        value = value.split(\",\");\n        value = new Set(value.filter(element => element !== \"\"));\n\n        [...value].forEach(element => {\n            this.addState(element);\n        });\n\n        this.transitions[state][symbol].to = value;\n        this.transitions[state][symbol].text = value.size ? \" \" + [...value].sort().join(\", \") : \" -\";\n    }\n\n    /**\n     * Check if exists initial state\n     *\n     * @return {bool}\n     */\n    hasInitial() {\n        if (this.initial) return true;\n        return false;\n    }\n\n    /**\n     * Check if exists epsilon transisitons\n     *\n     * @return {bool}\n     */\n    hasEpsilonTransition() {\n        return this.alphabet.has(\"&\");\n    }\n\n    /**\n     * Build de e-closure recursively\n     *\n     * @param {string} state The first state of the eclosure.\n     * @return {set}\n     */\n    buildEClosure(state, eclosure = new Set()) {\n        eclosure.add(state);\n        for (let each of this.transitions[state][\"&\"].to) {\n            // This if prevent cycles\n            if (!eclosure.has(each)) {\n                eclosure = this.buildEClosure(each, eclosure);\n            }\n        }\n        return eclosure;\n    }\n\n    /**\n     * Build reachable states\n     *\n     * @param {string} state The first state of the path.\n     * @return {set}\n     */\n    buildReachableStates(state, reachable_states = new Set()) {\n        reachable_states.add(state);\n        for (let symbol of this.alphabet) {\n            for (let each of this.transitions[state][symbol].to) {\n                // This if prevent cycles\n                if (!reachable_states.has(each)) {\n                    reachable_states = this.buildReachableStates(each, reachable_states);\n                }\n            }\n        }\n        return reachable_states;\n    }\n\n    /**\n     * Check if is Finite Automata\n     *\n     * @return {bool}\n     */\n    isFiniteAutomata() {\n        let dfa = new FA();\n        dfa.states = new Set(this.states);\n        dfa.alphabet = new Set(this.alphabet);\n        dfa.transitions = [];\n        for (let state of this.states) {\n            dfa.transitions[state] = [];\n            for (let symbol of this.alphabet) {\n                dfa.transitions[state][symbol] = { to: new Set(), text: \" -\" };\n                dfa.transitions[state][symbol].to = new Set(this.transitions[state][symbol].to);\n                dfa.transitions[state][symbol].text = this.transitions[state][symbol].text;\n            }\n        }\n        dfa.initial = this.initial.slice(0);\n        dfa.finals = new Set(this.finals);\n        dfa.determinized = true;\n\n        let reachable_states = [];\n        for (let state of dfa.states) {\n            reachable_states[state] = dfa.buildReachableStates(state);\n            let reached_any_final = false;\n            for (let each of reachable_states[state]) {\n                if (dfa.finals.has(each)) {\n                    reached_any_final = true;\n                }\n            }\n            if (!reached_any_final) {\n                dfa.deleteState(state);\n            }\n        }\n        if (dfa.initial === \"\" || !dfa.finals.size) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Remove usesless states from Finite Automata\n     */\n    removeUselessStates() {\n        let reachable_states = [];\n        for (let state of this.states) {\n            reachable_states[state] = this.buildReachableStates(state);\n            let reached_any_final = false;\n            for (let each of reachable_states[state]) {\n                if (this.finals.has(each)) {\n                    reached_any_final = true;\n                }\n            }\n            if (!reached_any_final) {\n                this.deleteState(state);\n            }\n        }\n\n        // Remove possible unused transitions\n        for (let symbol of this.alphabet) {\n            let counter = 0;\n            for (let state of this.states) {\n                counter += this.transitions[state][symbol].to.size;\n            }\n            if (!counter) {\n                this.deleteSymbol(symbol);\n            }\n        }\n    }\n\n    /**\n     * Rename the states of finite Automata to A - Z\n     * @param {set} available_letters A set with availabe letters.\n     */\n    renameStates(available_letters) {\n        if (available_letters === undefined) {\n            available_letters = new Set();\n            for (let i = 65; i < 91; i++) {\n                available_letters.add(String.fromCharCode(i));\n            }\n        }\n\n        let need_rename = new Set();\n\n        for (let state of this.states) {\n            if (state.length === 1) {\n                if (available_letters.has(state)) {\n                    available_letters.delete(state);\n                } else {\n                    need_rename.add(state);\n                }\n            } else {\n                need_rename.add(state);\n            }\n        }\n        let has_changed;\n        do {\n            has_changed = false;\n            for (let state of this.states) {\n                if (need_rename.has(state)) {\n                    let selected_letter = [...available_letters][0];\n                    available_letters.delete(selected_letter);\n                    for (let s of this.states) {\n                        for (let symbol of this.alphabet) {\n                            if (state === this.transitions[s][symbol].text.slice(1)) {\n                                this.transitions[s][symbol].text = \" \" + selected_letter;\n                                this.transitions[s][symbol].to = new Set(selected_letter);\n                            }\n                        }\n                    }\n                    this.transitions[selected_letter] = this.transitions[state];\n                    delete this.transitions[state];\n\n                    this.states.delete(state);\n                    this.states.add(selected_letter);\n                    if (this.finals.delete(state)) {\n                        this.finals.add(selected_letter);\n                    }\n                    if (this.initial === state) {\n                        this.initial = selected_letter;\n                    }\n                    has_changed = true;\n                }\n            }\n        } while (has_changed);\n    }\n\n    /**\n     * Determinize the Finite Automata\n     *\n     * @return {fa}\n     */\n    determinize() {\n        let dfa = new FA();\n\n        // Build eclosure\n        let eclosure = [];\n        if (this.hasEpsilonTransition()) {\n            for (let state of this.states) {\n                eclosure[state] = [...this.buildEClosure(state)].sort().join(\"\");\n            }\n        } else {\n            for (let state of this.states) {\n                eclosure[state] = state;\n            }\n        }\n\n        dfa.reset();\n        for (let symbol of this.alphabet) {\n            dfa.addSymbol(symbol);\n        }\n        dfa.deleteSymbol(\"&\");\n        dfa.addState(eclosure[this.initial]);\n        dfa.initial = eclosure[this.initial];\n\n        let old_length;\n        do {\n            old_length = dfa.states.size;\n\n            // Build transitions\n            for (let state of dfa.states) {\n                for (let symbol of dfa.alphabet) {\n                    // Build reachable states from actual\n                    let composedDestiny = new Set();\n                    // Split composed states and for each composed their \"tos\"\n                    for (let each_state of state.split(\"\")) {\n                        for (let to of this.transitions[each_state][symbol].to) {\n                            for (let element of eclosure[to].split(\"\")) {\n                                composedDestiny.add(element);\n                            }\n                        }\n                    }\n\n                    if (composedDestiny.size) {\n                        // Convert destination to a string state\n                        let composedState = [...composedDestiny].sort().join(\"\");\n                        dfa.addState(composedState);\n                        dfa.transitions[state][symbol].to = new Set(composedState);\n                        dfa.transitions[state][symbol].text = \" \" + composedState;\n                        [...composedDestiny].forEach(element => {\n                            if (this.finals.has(element)) {\n                                dfa.finals.add(composedState);\n                            }\n                        });\n                    }\n                }\n            }\n        } while (old_length !== dfa.states.size);\n        dfa.renameStates();\n        dfa.determinized = true;\n        return dfa;\n    }\n\n    /**\n     * Union two DFA'S\n     *\n     * @return {fa}\n     */\n    union(dfaOriginal) {\n        let dfa = new FA();\n        dfa.states = new Set(dfaOriginal.states);\n        dfa.alphabet = new Set(dfaOriginal.alphabet);\n        dfa.transitions = [];\n        for (let state of dfaOriginal.states) {\n            dfa.transitions[state] = [];\n            for (let symbol of dfaOriginal.alphabet) {\n                dfa.transitions[state][symbol] = { to: new Set(), text: \" -\" };\n                dfa.transitions[state][symbol].to = new Set(dfaOriginal.transitions[state][symbol].to);\n                dfa.transitions[state][symbol].text = dfaOriginal.transitions[state][symbol].text;\n            }\n        }\n        dfa.initial = dfaOriginal.initial.slice(0);\n        dfa.finals = new Set(dfaOriginal.finals);\n        dfa.determinized = false;\n\n        let available_letters = new Set();\n        // Generate all aplhabet letters\n        for (let i = 65; i < 91; i++) {\n            available_letters.add(String.fromCharCode(i));\n        }\n        // Filter already used letters by this\n        for (let state of this.states) {\n            available_letters.delete(state);\n        }\n\n        dfa.renameStates(available_letters);\n\n        // Filter already used letters by dfa\n        for (let state of dfa.states) {\n            available_letters.delete(state);\n        }\n\n        // Add symbols from this to generate transition table\n        for (let symbol of this.alphabet) {\n            dfa.addSymbol(symbol);\n        }\n\n        // Mark added symbols to generate transition table\n        let added_symbols = new Set();\n        for (let symbol of dfa.alphabet) {\n            if (!this.alphabet.has(symbol)) {\n                this.addSymbol(symbol);\n                added_symbols.add(symbol);\n            }\n        }\n        for (let state of this.states) {\n            dfa.addState(state);\n            for (let symbol of this.alphabet) {\n                dfa.transitions[state][symbol] = { to: new Set(), text: \" -\" };\n                dfa.transitions[state][symbol].to = new Set(this.transitions[state][symbol].to);\n                dfa.transitions[state][symbol].text = this.transitions[state][symbol].text;\n            }\n        }\n\n        let selected_letter = [...available_letters][0];\n        available_letters.delete(selected_letter);\n\n        // Build initial\n        dfa.addState(selected_letter);\n        dfa.addSymbol(\"&\");\n        dfa.transitions[selected_letter][\"&\"].to = new Set([this.initial, dfa.initial]);\n        dfa.transitions[selected_letter][\"&\"].text =\n            \" \" + [...dfa.transitions[selected_letter][\"&\"].to].sort().join(\",\");\n        dfa.setInitial(selected_letter);\n\n        // Build final\n        selected_letter = [...available_letters][0];\n        available_letters.delete(selected_letter);\n\n        dfa.addState(selected_letter);\n        for (let final of this.finals) {\n            dfa.transitions[final][\"&\"].to = new Set(selected_letter);\n            dfa.transitions[final][\"&\"].text = \" \" + [...dfa.transitions[final][\"&\"].to].sort().join(\"\");\n        }\n        for (let final of dfa.finals) {\n            dfa.transitions[final][\"&\"].to = new Set(selected_letter);\n            dfa.transitions[final][\"&\"].text = \" \" + [...dfa.transitions[final][\"&\"].to].sort().join(\"\");\n        }\n        dfa.finals = new Set(selected_letter);\n\n        // Clean this transition table\n        for (let symbol of added_symbols) {\n            this.deleteSymbol(symbol);\n        }\n        return dfa;\n    }\n    /**\n     * Check if Finite Automata has undefined transitions\n     *\n     * @return {bool}\n     */\n    hasUndefinedTransition() {\n        for (let state of this.states) {\n            for (let symbol of this.alphabet) {\n                if (!this.transitions[state][symbol].to.size) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Minimize a DFA\n     *\n     * @return {fa}\n     */\n    minimize() {\n        let dfa = new FA();\n        dfa.states = new Set(this.states);\n        dfa.alphabet = new Set(this.alphabet);\n        dfa.transitions = [];\n        for (let state of this.states) {\n            dfa.transitions[state] = [];\n            for (let symbol of this.alphabet) {\n                dfa.transitions[state][symbol] = { to: new Set(), text: \" -\" };\n                dfa.transitions[state][symbol].to = new Set(this.transitions[state][symbol].to);\n                dfa.transitions[state][symbol].text = this.transitions[state][symbol].text;\n            }\n        }\n        dfa.initial = this.initial.slice(0);\n        dfa.finals = new Set(this.finals);\n        dfa.determinized = true;\n\n        if (!dfa.determinized) {\n            return;\n        }\n\n        dfa.removeUselessStates();\n\n        let selected_letter;\n\n        let available_letters = new Set();\n        // Generate all aplhabet letters\n        for (let i = 65; i < 91; i++) {\n            available_letters.add(String.fromCharCode(i));\n        }\n        // Filter already used letters by this\n        for (let state of dfa.states) {\n            available_letters.delete(state);\n        }\n        // Build full transition automata\n        if (dfa.hasUndefinedTransition()) {\n            selected_letter = [...available_letters][0];\n            dfa.addState(selected_letter);\n            available_letters.delete(selected_letter);\n\n            for (let state of dfa.states) {\n                for (let symbol of dfa.alphabet) {\n                    if (!dfa.transitions[state][symbol].to.size) {\n                        dfa.transitions[state][symbol].to.add(selected_letter);\n                        dfa.transitions[state][symbol].text = \" \" + selected_letter;\n                    }\n                }\n            }\n        }\n\n        // Build relation table\n        let relation_table = [];\n        for (let state_1 of dfa.states) {\n            relation_table[state_1] = [];\n            for (let state_2 of dfa.states) {\n                if (state_1 !== state_2) {\n                    relation_table[state_1][state_2] = { marked: false, wait_list: new Set() };\n                } else {\n                    relation_table[state_1][state_2] = { marked: true, wait_list: new Set() };\n                }\n            }\n        }\n\n        // States trivially not equals\n        for (let state_1 of dfa.states) {\n            for (let state_2 of dfa.states) {\n                if (dfa.finals.has(state_1) && !dfa.finals.has(state_2)) {\n                    relation_table[state_1][state_2] = { marked: true, wait_list: new Set() };\n                    relation_table[state_2][state_1] = { marked: true, wait_list: new Set() };\n                }\n            }\n        }\n\n        // Logic to mark not equal states. Reference: http://wwwp.fc.unesp.br/~simonedp/zipados/TC02.pdf\n        for (let qu of dfa.states) {\n            for (let qv of dfa.states) {\n                if (relation_table[qu][qv].marked === false) {\n                    for (let symbol of dfa.alphabet) {\n                        let pu = [...dfa.transitions[qu][symbol].to][0];\n                        let pv = [...dfa.transitions[qv][symbol].to][0];\n                        if (pu === pv) {\n                        } else if (pu !== pv && relation_table[pu][pv].marked === false) {\n                            relation_table[pu][pv].wait_list.add(new Set([qu, qv]));\n                            relation_table[pv][pu].wait_list.add(new Set([qu, qv]));\n                        } else if (pu !== pv && relation_table[pu][pv].marked === true) {\n                            relation_table[qu][qv].marked = true;\n                            relation_table[qv][qu].marked = true;\n                            let has_changed;\n                            do {\n                                has_changed = false;\n                                for (let x of dfa.states) {\n                                    for (let y of dfa.states) {\n                                        if (relation_table[x][y].marked && relation_table[x][y].wait_list.size) {\n                                            for (let element of relation_table[x][y].wait_list) {\n                                                let e0 = [...element][0];\n                                                let e1 = [...element][1];\n                                                relation_table[e0][e1].marked = true;\n                                                relation_table[e1][e0].marked = true;\n                                            }\n                                            relation_table[x][y].wait_list = new Set();\n                                            relation_table[y][x].wait_list = new Set();\n                                            has_changed = true;\n                                        }\n                                    }\n                                }\n                            } while (has_changed);\n                        }\n                    }\n                }\n            }\n        }\n\n        // Delete aditional state to build full transition\n        if (selected_letter !== undefined) {\n            dfa.deleteState(selected_letter);\n            available_letters.add(selected_letter);\n        }\n\n        // Build the equals states\n        let new_states = new Set();\n        let equals_states = [];\n        for (let x of dfa.states) {\n            for (let y of dfa.states) {\n                if (!relation_table[x][y].marked) {\n                    let found = false;\n                    for (let state of new_states) {\n                        if (equals_states[state].has(x) || equals_states[state].has(y)) {\n                            equals_states[state].add(x);\n                            equals_states[state].add(y);\n                            found = true;\n                        }\n                    }\n                    if (!found) {\n                        let new_state = [...available_letters][0];\n                        available_letters.delete(new_state);\n                        new_states.add(new_state);\n                        equals_states[new_state] = new Set([x, y]);\n                    }\n                }\n            }\n        }\n\n        // Set transitions to new states\n        for (let state of dfa.states) {\n            for (let symbol of dfa.alphabet) {\n                let to = [...dfa.transitions[state][symbol].to][0];\n                for (let new_state of new_states) {\n                    if (equals_states[new_state].has(to)) {\n                        dfa.transitions[state][symbol].to = new Set(new_state);\n                        dfa.transitions[state][symbol].text = \" \" + new_state;\n                    }\n                }\n            }\n        }\n\n        // Add new states\n        for (let new_state of new_states) {\n            dfa.addState(new_state);\n            for (let symbol of dfa.alphabet) {\n                let set_to = new Set();\n\n                for (let state of equals_states[new_state]) {\n                    if (dfa.transitions[state][symbol].to.size) {\n                        set_to.add([...dfa.transitions[state][symbol].to][0]);\n                    }\n                }\n                let match_any_new = false;\n                let selected_state = \"\";\n                for (let each of set_to) {\n                    for (let n of new_states) {\n                        if (equals_states[n].has(each)) {\n                            match_any_new = true;\n                            selected_state = n;\n                        }\n                    }\n                }\n\n                if (match_any_new) {\n                    dfa.transitions[new_state][symbol].to = new Set(selected_state);\n                    dfa.transitions[new_state][symbol].text = \" \" + selected_state;\n                } else {\n                    dfa.transitions[new_state][symbol].to = new Set(set_to);\n                    dfa.transitions[new_state][symbol].text = \" \" + set_to;\n                }\n            }\n            for (let state of equals_states[new_state]) {\n                if (dfa.initial === state) {\n                    dfa.initial = new_state;\n                }\n                if (dfa.finals.has(state)) {\n                    dfa.finals.delete(state);\n                    dfa.finals.add(new_state);\n                }\n                dfa.deleteState(state);\n            }\n        }\n\n        return dfa;\n    }\n\n    /**\n     * Intersect two DFA'S\n     *\n     * @return {fa}\n     */\n    intersection(dfaOriginal) {\n        let dfa = new FA();\n        dfa.states = new Set(dfaOriginal.states);\n        dfa.alphabet = new Set(dfaOriginal.alphabet);\n        dfa.transitions = [];\n        for (let state of dfaOriginal.states) {\n            dfa.transitions[state] = [];\n            for (let symbol of dfaOriginal.alphabet) {\n                dfa.transitions[state][symbol] = { to: new Set(), text: \" -\" };\n                dfa.transitions[state][symbol].to = new Set(dfaOriginal.transitions[state][symbol].to);\n                dfa.transitions[state][symbol].text = dfaOriginal.transitions[state][symbol].text;\n            }\n        }\n        dfa.initial = dfaOriginal.initial.slice(0);\n        dfa.finals = new Set(dfaOriginal.finals);\n        dfa.determinized = false;\n\n        let result = new FA();\n\n        for (let symbol of this.alphabet) {\n            if (dfa.alphabet.has(symbol)) {\n                result.addSymbol(symbol);\n            }\n        }\n\n        for (let state_x of this.states) {\n            for (let state_y of dfa.states) {\n                let new_state = [...new Set([state_x, state_y])].join(\"\");\n                result.addState(new_state);\n                for (let symbol of result.alphabet) {\n                    if (this.transitions[state_x][symbol].to.size && dfa.transitions[state_y][symbol].to.size) {\n                        let new_to = new Set(this.transitions[state_x][symbol].to);\n                        new_to.add([...dfa.transitions[state_y][symbol].to][0]);\n                        result.transitions[new_state][symbol].to = new_to;\n                        result.transitions[new_state][symbol].text = \" \" + [...new_to].join(\"\");\n                    }\n                }\n            }\n        }\n\n        for (let final_x of this.finals) {\n            for (let final_y of dfa.finals) {\n                let new_finals = new Set([final_x, final_y]);\n                result.finals.add([...new_finals].join(\"\"));\n            }\n        }\n\n        result.initial = [...new Set([this.initial, dfa.intial])].join(\"\");\n\n        result.renameStates();\n\n        return result;\n    }\n}\n","import * as actionType from \"../actions/ActionType\";\nimport Grammar from \"../logic/Grammar\";\nimport FA from \"../logic/FA\";\nimport RE from \"../logic/RE\";\n\nconst languageReducer = (state = 0, action) => {\n    let newState = Object.assign({}, state);\n    switch (action.type) {\n        case actionType.ADD_LANGUAGE:\n            newState.languages.push({\n                name: action.name,\n                grammar: new Grammar(),\n                fa: new FA(new Set(), new Set(), [], \"\", new Set()),\n                re: new RE()\n            });\n            newState.selected_language = newState.languages.length - 1;\n            return newState;\n\n        case actionType.SELECT_LANGUAGE:\n            newState.selected_language = action.selected_id;\n            return newState;\n\n        case actionType.REMOVE_LANGUAGE:\n            newState.languages.splice(newState.selected_language, 1);\n            if (newState.selected_language === newState.languages.length)\n                newState.selected_language = newState.languages.length - 1;\n            return newState;\n\n        case actionType.UPDATE_GRAMMAR:\n            newState.languages[newState.selected_language].grammar = new Grammar(action.text, [], [], {}, null);\n            newState.languages[newState.selected_language].grammar.extractElements();\n            newState.languages[newState.selected_language].fa.buildFromGrammar(\n                newState.languages[newState.selected_language].grammar\n            );\n\n            return newState;\n\n        case actionType.ADD_STATE:\n            newState.languages[newState.selected_language].fa.addState(action.state);\n            return newState;\n\n        case actionType.ADD_SYMBOL:\n            newState.languages[newState.selected_language].fa.addSymbol(action.symbol);\n            return newState;\n\n        case actionType.SET_INITIAL:\n            newState.languages[newState.selected_language].fa.setInitial(action.symbol);\n            return newState;\n\n        case actionType.ADD_FINAL:\n            newState.languages[newState.selected_language].fa.addFinal(action.state);\n            return newState;\n\n        case actionType.REMOVE_FINAL:\n            newState.languages[newState.selected_language].fa.removeFinal(action.state);\n            return newState;\n\n        case actionType.UPDATE_TRANSITION:\n            newState.languages[newState.selected_language].fa.updateTransition(action.state, action.to, action.symbol);\n            return newState;\n\n        case actionType.DETERMINIZE:\n            let det_name =\n                action.name !== \"\" ? action.name : \"(id : \" + newState.selected_language.toString() + \" deterministic)\";\n            let det_dfa = newState.languages[newState.selected_language].fa.determinize();\n            let det_grammar = new Grammar();\n            det_grammar.buildFromDFA(det_dfa);\n            newState.languages.push({\n                name: det_name,\n                grammar: det_grammar,\n                fa: det_dfa,\n                re: new RE()\n            });\n            newState.selected_language = newState.languages.length - 1;\n            console.log(JSON.stringify(det_grammar));\n            return newState;\n\n        case actionType.MINIMIZE:\n            let min_name = action.name !== \"\" ? action.name : newState.selected_language.toString() + \" minimal\";\n            let min_dfa = newState.languages[newState.selected_language].fa.minimize();\n            let min_grammar = new Grammar();\n            min_grammar.buildFromDFA(min_dfa);\n            newState.languages.push({\n                name: min_name,\n                grammar: min_grammar,\n                fa: min_dfa,\n                re: new RE()\n            });\n            newState.selected_language = newState.languages.length - 1;\n\n            return newState;\n\n        case actionType.UNION:\n            let union_id = parseInt(action.id, 10);\n            if (union_id < 0 || union_id > newState.languages.length - 1 || !Number.isInteger(union_id)) {\n                return newState;\n            }\n            if (\n                newState.languages[newState.selected_language].fa.determinized === true &&\n                newState.languages[union_id].fa.determinized === true\n            ) {\n                let union_dfa = newState.languages[newState.selected_language].fa.union(\n                    newState.languages[union_id].fa\n                );\n                let union_grammar = new Grammar();\n\n                newState.languages.push({\n                    name: \"ID: \" + newState.selected_language + \" UNION  ID:\" + union_id,\n                    grammar: union_grammar,\n                    fa: union_dfa,\n                    re: new RE()\n                });\n                newState.selected_language = newState.languages.length - 1;\n                return newState;\n            }\n            return newState;\n\n        case actionType.INTERSECTION:\n            let intersection_id = parseInt(action.id, 10);\n            if (intersection_id < 0 || intersection_id > newState.languages.length - 1) {\n                return newState;\n            }\n            if (\n                newState.languages[newState.selected_language].fa.determinized === true &&\n                newState.languages[intersection_id].fa.determinized === true\n            ) {\n                let intersection_dfa = newState.languages[newState.selected_language].fa.intersection(\n                    newState.languages[intersection_id].fa\n                );\n                let intersection_grammar = new Grammar();\n                intersection_grammar.buildFromDFA(intersection_dfa);\n\n                newState.languages.push({\n                    name: \"ID:\" + newState.selected_language + \" INTERSECTION ID:\" + intersection_id,\n                    grammar: intersection_grammar,\n                    fa: intersection_dfa,\n                    re: new RE()\n                });\n                newState.selected_language = newState.languages.length - 1;\n                return newState;\n            }\n            return newState;\n\n        case actionType.UPDATE_RE:\n            newState.languages[newState.selected_language].re = new RE(action.text);\n            let re_dfa = newState.languages[newState.selected_language].re.buildDFA();\n            newState.languages[newState.selected_language].fa = re_dfa === undefined ? new FA() : re_dfa;\n            if (re_dfa !== undefined) {\n                newState.languages[newState.selected_language].grammar.buildFromDFA(re_dfa);\n            }\n\n            return newState;\n\n        case actionType.REMOVE_STATE:\n            newState.languages[newState.selected_language].fa.deleteState(action.state);\n            return newState;\n\n        case actionType.REMOVE_SYMBOL:\n            newState.languages[newState.selected_language].fa.deleteSymbol(action.symbol);\n            return newState;\n\n        default:\n            return newState;\n    }\n};\n\nexport default languageReducer;\n","import { combineReducers } from \"redux\";\nimport languageReducer from \"./languageReducer\";\n\nconst automataApp = combineReducers({\n    languageReducer\n});\n\nexport default automataApp;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import FA from \"./logic/FA\";\n// import RE from \"./logic/RE\";\n// import Grammar from \"./logic/Grammar\";\n\nexport const initial_shape = {\n    languageReducer: {\n        selected_language: 0,\n        languages: []\n    }\n};\n","import \"./index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./reducers\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { initial_shape } from \"./Shape\";\n\nconst store = createStore(reducer, initial_shape);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}